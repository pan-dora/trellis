buildscript {
}

plugins {
    id 'com.palantir.docker' version '0.13.0'
}

ext {
    vendor = 'pandorasystems'
    homepage = 'http://www.trellisldp.org'
    docURL = 'http://www.trellisldp.org/apidocs'
    license = 'Apache 2'
}

configure(allprojects) { project ->
    apply plugin: 'maven'
    apply plugin: 'java-library'
    apply plugin: 'maven-publish'
    apply plugin: 'signing'
    apply plugin: 'checkstyle'
    apply plugin: 'jacoco'

    repositories {
        jcenter()
        mavenCentral()
        mavenLocal()
        maven {
            url "https://oss.sonatype.org/content/repositories/snapshots"
        }
    }
    ext {
        activationApiVersion = '1.2.0'
        activeMqVersion = '5.15.3'
        amqpClientVersion = '4.2.0'
        ariesVersion = '1.0.8'
        cheshireVersion = '5.8.0'
        clojureVersion = '1.8.0'
        commonsCollectionsVersion = '4.1'
        commonsIoVersion = '2.6'
        commonsLangVersion = '3.7'
        commonsCsvVersion = '1.4'
        commonsCodecVersion = '1.11'
        commonsRdfVersion = '0.5.0'
        curatorFrameworkVersion = '4.0.1-SNAPSHOT'
        dexxcollectionVersion = '0.6'
        dropwizardVersion = '1.2.4'
        errorproneVersion = '2.1.2-SNAPSHOT'
        guavaVersion = '20.0'
        httpclientVersion = '4.5.3'
        httpcoreVersion = '4.4.6'
        jacksonVersion = '2.9.4'
        javaxJsonApiVersion = '1.1'
        javaxAnnotationsVersion = '1.3.2'
        javaxInjectVersion = '1_2'
        javaxJsonVersion = '1.1.2'
        jaxrsVersion = '2.1'
        jaxWsRsApiVersion = '2.0.1'
        jenaVersion = '3.6.0'
        jettyAlpnServerVersion = '9.4.8.v20171121'
        jettyAlpnBootVersion = '8.1.12.v20180117'
        jmsApiVersion = '2.0.1'
        jsonldVersion = '0.11.1'
        kafkaVersion = '1.0.0_1'
        kafkaClientsVersion = '1.0.0-SNAPSHOT'
        lz4Version = '1.3.0'
        metricsVersion = '4.0.2'
        mustacheVersion = '0.9.5_1'
        mustacheCompilerVersion = '0.9.5'
        rabbitMqVersion = '5.1.2'
        slf4jVersion = '1.7.25'
        tamayaVersion = '0.3-incubating'
        thriftVersion = '0.9.3'

        jwtVersion = '0.9.0'
        jaxbVersion = '2.3.0'

        /* Testing */
        logbackVersion = '1.2.3'
        apiguardianVersion = '1.0.0'
        awaitilityVersion = '3.0.0'
        commonsTextVersion = '1.2'
        jerseyVersion = '2.26'
        jsonVersion = '1.1.2'
        junitVersion = '5.1.0'
        junitPlatformVersion = '1.1.0'
        mockitoVersion = '2.15.0'
        xercesVersion = '2.11.0'

        karafVersion = '4.1.5'
        osgiVersion = '6.0.0'
        osgiCompendiumVersion = '5.0.0'
        paxExamVersion = '4.11.0'
        spiflyVersion = '1.0.8'
        projectOsgiVersion = project.version.replaceAll("-SNAPSHOT", ".SNAPSHOT")
        jenaVersionRange = '[3.5,4)'
    }

    processResources {
        filesNotMatching(["**/*.sh", "**/*.jar", "**/*.yml"]) {
            expand(project.properties)
        }
    }

    def dockerResourceDir = "${rootProject.buildDir}/resources/main/docker"

    docker {
        name "${vendor}/trellisldp"
        tags "${version}"
        dockerfile file("${dockerResourceDir}/Dockerfile")
        files "${dockerResourceDir}/cfg","${dockerResourceDir}/lib"
        copySpec.from("${buildDir}/maven").into("${mavenInstallPath}")
        pull true
        noCache true
    }

    def homeDir = System.getProperty('user.home')
    def mavenLocal = new File(homeDir, ".m2/${mavenInstallPath}")

    task copyTask(type: Copy) {
        from mavenLocal
        into "${rootProject.buildDir}/maven"
    }
    copyTask.dependsOn install
}

configure(subprojects) { subproject ->
    task deleteSubprojectFiles(type: Delete) {
        delete "${projectDir}/settings.gradle", "${projectDir}/docs"
    }
}

configurations {
    buildToolsConfig
}

dependencies {
    buildToolsConfig 'org.trellisldp:trellis-build-tools:0.2.0'
}

task processBuildTools(type: Copy) {
    from {
        configurations.buildToolsConfig.collect {
            zipTree(it).matching {
                include 'checkstyle/*.xml'
                include 'license/*.txt'
            }
        }
    }
    into 'build'
}

task submoduleUpdate(type: Exec) {
    description = 'Updates and merges submodules'
    executable = 'git'
    args = ['submodule','update','--remote','--merge']
}

checkstyleMain.dependsOn processBuildTools

task javadocJar(type: Jar) {
    classifier 'javadoc'
    from ("$rootDir/LICENSE") {
        into "META-INF"
    }
    from javadoc
}

task sourceJar(type: Jar) {
    classifier 'sources'
    from ("$rootDir/LICENSE") {
        into "META-INF"
    }
    from sourceSets.main.allSource
}