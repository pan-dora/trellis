buildscript {
}

plugins {
    id 'com.palantir.docker' version '0.13.0'
}

ext {
    vendor = 'pandorasystems'
    homepage = 'http://www.trellisldp.org'
    docURL = 'http://www.trellisldp.org/apidocs'
    license = 'Apache 2'
}

configure(allprojects) { project ->
    apply plugin: 'maven'
    apply plugin: 'osgi'
    apply plugin: 'java-library'
    apply plugin: 'maven-publish'
    apply plugin: 'signing'
    apply plugin: 'checkstyle'
    apply plugin: 'jacoco'

    repositories {
        jcenter()
        mavenCentral()
        mavenLocal()
        maven {
            url "https://oss.sonatype.org/content/repositories/snapshots"
        }
        maven {
            url "http://clojars.org/repo/"
        }
    }

    ext.activeMqVersion = "5.15.0"
    ext.javaxAnnotationsVersion = '1.3.1'
    ext.javaxInjectVersion = '1_2'
    ext.javaxJsonVersion = '1.1.2'
    ext.jaxrsVersion = '2.1'
    ext.amqpClientVersion = "4.2.0"
    ext.ariesVersion = "1.0.8"
    ext.cheshireVersion = "5.8.0"
    ext.clojureVersion = "1.8.0"
    ext.commonsIoVersion = "2.6"
    ext.commonsLangVersion = "3.5"
    ext.commonsCsvVersion = "1.4"
    ext.commonsCodecVersion = "1.11"
    ext.commonsTextVersion = '1.2'
    ext.curatorVersion = "4.0.0"
    ext.curatorFrameworkVersion = "4.0.1-SNAPSHOT"
    ext.dexxcollectionVersion = "0.6"
    ext.errorproneVersion = "2.1.2-SNAPSHOT"
    ext.guavaVersion = "20.0"
    ext.httpclientVersion = "4.5.3"
    ext.httpcoreVersion = "4.4.6"
    ext.jacksonVersion = "2.9.0"
    ext.javaxJsonApiVersion = "1.1"
    ext.jaxWsRsApiVersion = "2.0.1"
    ext.jenaVersion = "3.4.0"
    ext.jsonldVersion = "0.11.1"
    ext.kafkaClientsVersion = "1.0.0-SNAPSHOT"
    ext.lz4Version = "1.3.0"
    ext.metricsVersion = "3.2.4"
    ext.mustacheVersion = '0.9.5_1'
    ext.mustacheCompilerVersion = "0.9.5"
    ext.thriftVersion = "0.9.3"

    //Rosid Dependencies
    ext.beamVersion = '2.1.0'
    ext.commonsRdfVersion = '0.5.0'
    ext.curatorVersion = '4.0.0'
    ext.kafkaVersion = '1.0.0_1'
    ext.trellisVersion = '0.5.1'
    ext.slf4jVersion = '1.7.25'
    ext.zookeeperVersion = '3.4.11'
    ext.trellisKafkaVersion = '0.2.3'
    ext.activationApiVersion = '1.2.0'
    ext.dropwizardVersion = '1.2.0'

    ext.jwtVersion = '0.9.0'
    ext.jaxbVersion = '2.3.0'

    ext.logbackVersion = '1.2.3'
    ext.apiguardianVersion = '1.0.0'
    ext.awaitilityVersion = '3.0.0'
    ext.jacksonVersion = '2.9.3'
    ext.jerseyVersion = '2.26'
    ext.jsonVersion = '1.1.2'
    ext.junitVersion = '5.0.2'
    ext.junitPlatformVersion = '1.0.2'
    ext.junitVintageVersion = '4.12.2'
    ext.mockitoVersion = '2.13.0'
    ext.hamcrestVersion = '1.3'
    ext.xercesVersion = '2.11.0'

    ext.spiflyVersion = '1.0.8'
    ext.projectOsgiVersion = project.version.replaceAll("-SNAPSHOT", ".SNAPSHOT")
    ext.trellisVersionRange = '[0.5,1)'
    ext.jenaVersionRange = '[3.5,4)'

    processResources {
        filesNotMatching(["**/*.sh", "**/*.jar"]) {
            expand(project.properties)
        }
    }

    def dockerResourceDir = "${rootProject.buildDir}/resources/main/docker"

    docker {
        name "${vendor}/trellisldp"
        tags "${version}"
        dockerfile file("${dockerResourceDir}/Dockerfile")
        files "${dockerResourceDir}/cfg","${dockerResourceDir}/lib"
        copySpec.from("${buildDir}/maven").into("${mavenInstallPath}")
        pull true
        noCache true
    }

    def homeDir = System.getProperty('user.home')
    def mavenLocal = new File(homeDir, ".m2/${mavenInstallPath}")

    task copyTask(type: Copy) {
        from mavenLocal
        into "${rootProject.buildDir}/maven"
    }
    copyTask.dependsOn install
}

configure(subprojects) { subproject ->
    task deleteSubprojectFiles(type: Delete) {
        delete "${projectDir}/settings.gradle", "${projectDir}/docs"
    }

    task javadocJar(type: Jar) {
        classifier 'javadoc'
        from ("$rootDir/LICENSE") {
            into "META-INF"
        }
        from javadoc
    }

    task sourceJar(type: Jar) {
        classifier 'sources'
        from ("$rootDir/LICENSE") {
            into "META-INF"
        }
        from sourceSets.main.allSource
    }
}

configurations {
    buildToolsConfig
}

dependencies {
    buildToolsConfig 'org.trellisldp:trellis-build-tools:0.2.0'
}

task processBuildTools(type: Copy) {
    from {
        configurations.buildToolsConfig.collect {
            zipTree(it).matching {
                include 'checkstyle/*.xml'
                include 'license/*.txt'
            }
        }
    }
    into 'build'
}

task submoduleUpdate(type: Exec) {
    description = 'Updates and merges submodules'
    executable = 'git'
    args = ['submodule','update','--remote','--merge']
}

checkstyleMain.dependsOn processBuildTools